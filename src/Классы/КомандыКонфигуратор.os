#Использовать v8runner
#Использовать ibcmdrunner
#Использовать 1connector

Перем Конфигуратор Экспорт;
Перем УправлениеИБ Экспорт;
Перем _КомандыПараметры Экспорт;
&Логер
Перем Лог;

&Желудь
Процедура ПриСозданииОбъекта()
	
	
КонецПроцедуры

Процедура Инициализировать(Идентификатор) Экспорт
	
	Конфигуратор = Новый УправлениеКонфигуратором;
	
	УправлениеИБ = Новый УправлениеИБ;
	КаталогИсполнения = ПолучитьИмяВременногоФайла();
	УправлениеИБ.УстановитьПараметрыАвтономногоСервера(КаталогИсполнения);
	
	Конфигуратор.УстановитьКлючРазрешенияЗапуска("Обновление");
	ИмяФайлаOut = СтрШаблон("%1\build\out.txt", _КомандыПараметры.ВернутьСвойство("PathRepository"));
	Конфигуратор.УстановитьИмяФайлаСообщенийПлатформы(ИмяФайлаOut);
	
	ПараметрыСтрокиСоединения = Конфигуратор.ПараметрыСтрокиСоединения();
	ПараметрыСтрокиСоединения.Сервер = _КомандыПараметры.ВернутьСвойство("PathServer1с");
	
	ПараметрыСтрокиСоединения.Порт = 1541;
	ПараметрыСтрокиСоединения.ИмяБазы = _КомандыПараметры.ВернутьСвойство("NameDB");
	
	Конфигуратор.УстановитьКонтекст(ПараметрыСтрокиСоединения
		, _КомандыПараметры.ВернутьСвойство("UsrLogin1c"), _КомандыПараметры.ВернутьСвойство("UsrPswd1c"));
	
	Конфигуратор.ИспользоватьВерсиюПлатформы(_КомандыПараметры.ВернутьСвойство("NumberPlatform"));
	
	УправлениеИБ.УстановитьПараметрыСервернойИБ(_КомандыПараметры.ВернутьСвойство("TypeDB")
		, _КомандыПараметры.ВернутьСвойство("ServerDB")
		, _КомандыПараметры.ВернутьСвойство("NameDB")
		, _КомандыПараметры.ВернутьСвойство("UsrLoginDB")
		, _КомандыПараметры.ВернутьСвойство("UsrPswdDB"));
	
	УправлениеИБ.УстановитьПараметрыАвторизацииИБ(_КомандыПараметры.ВернутьСвойство("UsrLogin1c")
		, _КомандыПараметры.ВернутьСвойство("UsrPswd1c"));
	
КонецПроцедуры

Процедура ИнициализироватьДляФайловойБазы(Идентификатор) Экспорт
	
	Конфигуратор = Новый МойУправлениеКонфигуратором;
	ПутьКБазе = СтрШаблон("%1\%2", _КомандыПараметры.ВернутьСвойство("PathRepositoryMain"), "v8r_TempDB");
	Конфигуратор.УстановитьКонтекст(СтрШаблон("/F%1", ПутьКБазе), "", "");
	ИмяФайлаOut = СтрШаблон("%1\build\out.txt", _КомандыПараметры.ВернутьСвойство("PathRepository"));
	Конфигуратор.УстановитьИмяФайлаСообщенийПлатформы(ИмяФайлаOut);
	
КонецПроцедуры

Процедура ОбновитьБазуИзФайлов() Экспорт
	ПутьККонфигурации = СтрШаблон("%1\src\cf", _КомандыПараметры.ВернутьСвойство("PathRepository"));
	Если Нрег(_КомандыПараметры.ВернутьСвойство("MethodLoadDB")) = "ibcmd" Тогда
		
		ЧислоПопыток = 3;
		Для Сч = 1 По ЧислоПопыток Цикл
			УправлениеИБ.ЗагрузитьКонфигурациюИзФайлов(ПутьККонфигурации, "", "", Ложь);
			Если НЕ УправлениеИБ.УспешноеВыполнениеКоманды Тогда
				Лог.Информация("Ошибка при выполнении команды ibcmd");
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ УправлениеИБ.УспешноеВыполнениеКоманды Тогда
			ВызватьИсключение "Исчерпано количество попыток ibcmd. Попробуйте заново";
		КонецЕсли;
		
		ЧислоПопыток = 3;
		Для Сч = 1 По ЧислоПопыток Цикл
			УправлениеИБ.ОбновитьКонфигурациюБазыДанных();
			Если НЕ УправлениеИБ.УспешноеВыполнениеКоманды Тогда
				Лог.Информация("Ошибка при выполнении команды ibcmd");
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ УправлениеИБ.УспешноеВыполнениеКоманды Тогда
			ВызватьИсключение "Исчерпано количество попыток ibcmd. Попробуйте заново";
		КонецЕсли;
		
	Иначе
		Конфигуратор.ЗагрузитьКонфигурациюИзФайлов(ПутьККонфигурации, , , , Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьРасширенияИзФайлов() Экспорт

	
	Если _КомандыПараметры.ЕстьСвойство("Extensions") Тогда
		Extensions = _КомандыПараметры.ВернутьСвойство("Extensions");
		МассивИменРасширений = СтрРазделить(Extensions, ",");
		Для Каждого ИмяРасширения Из МассивИменРасширений Цикл
			ЗагрузитьРасширениеИзФайлов(ИмяРасширения);	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьРасширениеИзФайлов(ИмяРасширения) Экспорт
	
	
	ПутьРасширения = СтрШаблон("%1\src\cfe\%2", _КомандыПараметры.ВернутьСвойство("PathRepository"), ИмяРасширения);
	
	Если Нрег(_КомандыПараметры.ВернутьСвойство("MethodLoadDB")) = "ibcmd" Тогда
		
		УправлениеИБ.ЗагрузитьКонфигурациюИзФайлов(ПутьРасширения, ИмяРасширения);
		Если НЕ УправлениеИБ.УспешноеВыполнениеКоманды Тогда
			Лог.Информация("Ошибка при выполнении команды ibcmd ЗагрузитьВсеРасширенияИзФайлов");
		КонецЕсли;
		УправлениеИБ.ОбновитьКонфигурациюБазыДанных(ИмяРасширения);
		
	Иначе
		
		Конфигуратор.ЗагрузитьРасширениеИзФайлов(ПутьРасширения);
		Конфигуратор.ОбновитьКонфигурациюБазыДанных( , , , ИмяРасширения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьРасширениеВФайлы() Экспорт
	
	Если _КомандыПараметры.ЕстьСвойство("Extensions") Тогда
		Extensions = _КомандыПараметры.ВернутьСвойство("Extensions");
		МассивИменРасширений = СтрРазделить(Extensions, ",");
		Для Каждого ИмяРасширения Из МассивИменРасширений Цикл
			ВыгрузитьРасширениеПоИмениВФайлы(ИмяРасширения);	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьРасширениеПоИмениВФайлы(ИмяРасширения) Экспорт
	ПутьРасширения = СтрШаблон("%1\src\cfe\%2", _КомандыПараметры.ВернутьСвойство("PathRepository"), ИмяРасширения);
	Попытка
		Конфигуратор.ВыгрузитьРасширениеВФайлы(ПутьРасширения, ИмяРасширения);
	Исключение
		Лог.Информация("Не найдено расширение " + ИмяРасширения);
	КонецПопытки;
КонецПроцедуры

Процедура ВыгрузитьКонфигурациюВФайлы(Расширение = "") Экспорт
	
	Если Нрег(_КомандыПараметры.ВернутьСвойство("MethodLoadDB")) = "ibcmd" Тогда
		
		Если Расширение = "" Тогда
			УправлениеИБ.ВыгрузитьКонфигурациюВФайлы(СтрШаблон("%1\src\cf", _КомандыПараметры.ВернутьСвойство("PathRepository")),
				"", "", Ложь);
		Иначе
			КаталогРасширения = СтрШаблон("%1\src\cfe\%2", _КомандыПараметры.ВернутьСвойство("PathRepository"), Расширение);
			ФайловыеОперации.ОбеспечитьПустойКаталог(КаталогРасширения);
			
			УправлениеИБ.ВыгрузитьКонфигурациюВФайлы(КаталогРасширения,
				"", Расширение, Ложь);
			
		КонецЕсли;
		
	Иначе
		Конфигуратор.ВыгрузитьКонфигурациюВФайлы(СтрШаблон("%1\src\cf", _КомандыПараметры.ВернутьСвойство("PathRepository")));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьОбработкиВКонфигурации(ПутьКВнешнимФайлам = Неопределено, МассивИменФайлов = Неопределено) Экспорт
	
	Если ПутьКВнешнимФайлам = Неопределено Тогда
		ПутьКВнешнимФайлам = СтрШаблон("%1/%2", _КомандыПараметры.ВернутьСвойство("PathRepository"), "\build\epf\");
	КонецЕсли;
	
	Файлы = НайтиФайлы(ПутьКВнешнимФайлам, "*.e?f");
	ШаблонПути = "%1/import_file?object_name=%2&extension=%3";
	
	Аутентификация = Новый Структура("Пользователь, Пароль", _КомандыПараметры.ВернутьСвойство("UsrLogin1c"),
			_КомандыПараметры.ВернутьСвойство("UsrPswd1c"));
	
	Для Каждого Файл Из Файлы Цикл
		
		Если НЕ МассивИменФайлов = Неопределено И МассивИменФайлов.Найти(Файл.ИмяБезРасширения) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПередаваемыйФайл = Новый Структура;
		ПередаваемыйФайл.Вставить("Имя", Файл.ИмяБезРасширения);
		ПередаваемыйФайл.Вставить("ИмяФайла", Файл.Имя);
		ПередаваемыйФайл.Вставить("Данные", Новый ДвоичныеДанные(Файл.ПолноеИмя));
		ПередаваемыйФайл.Вставить("Тип", "text/plain");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Аутентификация", Аутентификация);
		ДополнительныеПараметры.Вставить("Таймаут", 120);
		
		Сервер1с = _КомандыПараметры.ВернутьСвойство("ServerDBWeb");
		База1с = _КомандыПараметры.ВернутьСвойство("NameDBWeb");
		
		ПутьКБазе = Сервер1с + "/" + База1с + "/hs/TW_DBE";
		
		Юрл = СтрШаблон(ШаблонПути, ПутьКБазе, Файл.ИмяБезРасширения, СтрЗаменить(Файл.Расширение, ".", ""));
		Лог.Информация(Юрл);
		ОтветЗапроса = КоннекторHTTP.Post(Юрл,
				Новый ДвоичныеДанные(Файл.ПолноеИмя), , ДополнительныеПараметры);
		
		Попытка
			ОтветЗапросаСтрокой = Строка(ОтветЗапроса.Json()["success"]);
			СообщениеВЛогиПользователю = СтрШаблон("Обработка: %1 - %2",
					Файл.ИмяБезРасширения, ОтветЗапросаСтрокой);
			
			Лог.Информация(СообщениеВЛогиПользователю);
		Исключение
			Лог.Информация(СтрШаблон("Обработка: %1, исключительная ошибка", Файл.ИмяБезРасширения));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СобратьОбработки() Экспорт
	
	Путь = _КомандыПараметры.ВернутьСвойство("PathRepository") + "\src\epf";
	Маска = "*.xml";
	
	ИменаОбработок = СтрРазделить(_КомандыПараметры.ВернутьСвойство("NamesDataProcessors"), ",");
	
	Для Каждого ИмяОбработки Из ИменаОбработок Цикл
		ПолноеИмя = СтрШаблон("%1\%2\%3.xml", _КомандыПараметры.ВернутьСвойство("PathRepository"), "\src\epf", ИмяОбработки);
		КомпилироватьФайл(ПолноеИмя, ИмяОбработки);
	КонецЦикла;
	
КонецПроцедуры

Процедура СобратьВсеОбработки() Экспорт
	
	Путь = _КомандыПараметры.ВернутьСвойство("PathRepository") + "\src\epf";
	Маска = "*.xml";
	
	Файлы = НайтиФайлы(Путь, Маска, Ложь);
	
	Для Каждого Файл Из Файлы Цикл
		ИмяОбработки = Файл.ИмяБезРасширения; // +  ".epf";
		КомпилироватьФайл(Файл.ПолноеИмя, ИмяОбработки);
	КонецЦикла;
	
КонецПроцедуры

Процедура КомпилироватьФайл(ИмяФайл, ИмяОбработки) Экспорт
	//Путь куда мы собираем готовые
	КаталогСобранныхОбработок = _КомандыПараметры.ВернутьСвойство("PathRepository") + СтрШаблон("\build\epf\");
	
	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/LoadExternalDataProcessorOrReportFromFiles """
		+ ИмяФайл + """  """ + КаталогСобранныхОбработок + ИмяОбработки + """");
	
	Попытка
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение
		Лог.Информация("Ошибка с файлом " + ИмяОбработки);
		//Если есть ошибка, потом с разберемся с этим файлом, но не будем прерывать работу.
		ВызватьИсключение "Выгрузка обработок в xml прервана.";
	КонецПопытки;
	
КонецПроцедуры

Процедура РазобратьОбработки() Экспорт
	
	Путь = _КомандыПараметры.ВернутьСвойство("PathRepository") + "\build\epf";
	Маска = "*.e?f";
	
	Файлы = НайтиФайлы(Путь, Маска, Ложь);
	
	НомерФайла = 0;
	Для Каждого Файл Из Файлы Цикл
		
		ВыгрузитьФайлВXML(Файл.ПолноеИмя, Файл.ИмяБезРасширения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьФайлВXML(ИмяФайла, ИмяБезРасширения)
	
	//Путь к исходникам
	КаталогОбработок = _КомандыПараметры.ВернутьСвойство("PathRepository") + СтрШаблон("\src\%1", "epf");
	
	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/DumpExternalDataProcessorOrReportToFiles """ + КаталогОбработок + """  """ + ИмяФайла + """");
	
	КаталогОбработки = СтрШаблон("%1\%2", КаталогОбработок, ИмяБезРасширения);
	Попытка
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
		//Добавить версию
		
	Исключение
		ВызватьИсключение "Выгрузка обработок в xml прервана.";
	КонецПопытки;
	
	Попытка
		РаботаСМодулями.ДобавитьНовуюВерсиюОбработке(КаталогОбработки, _КомандыПараметры.ВернутьСвойство("TextCommit"),
			_КомандыПараметры.ВернутьСвойство("UsrLogin1c"));
		Лог.Информация(КаталогОбработки);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьХранилищеПродуктива(ФайлКонфигурации, ФайлНастроек) Экспорт
	
	Конфигуратор.ЗахватитьОбъектыВХранилище(_КомандыПараметры.ВернутьСвойство("PathStorage"),
		_КомандыПараметры.ВернутьСвойство("UserStorage"));
	
	Конфигуратор.ОбъединитьКонфигурациюСФайлом(ФайлКонфигурации, ФайлНастроек);
	
	Конфигуратор.ОбновитьКонфигурациюБазыДанных();
	
	Конфигуратор.ПоместитьИзмененияОбъектовВХранилище(_КомандыПараметры.ВернутьСвойство("PathStorage"),
		_КомандыПараметры.ВернутьСвойство("UserStorage"), , , _КомандыПараметры.ВернутьСвойство("NameRelease"));
	
КонецПроцедуры

Процедура СобратьОбработкиЧерезУправлениеИБ() Экспорт
	
КонецПроцедуры

Процедура ВыгрузитьКонфигурациюВФайл(ФайлКонфигурации) Экспорт
	Конфигуратор.ВыгрузитьКонфигурациюВФайл(ФайлКонфигурации);
КонецПроцедуры

Процедура ВыгрузитьРасширениеВФайл(ПутьФайлРасширения, ИмяРасширения) Экспорт
	Конфигуратор.ВыгрузитьРасширениеВФайл(ПутьФайлРасширения, ИмяРасширения);
КонецПроцедуры

Процедура ОтключитьсяОтХранилища() Экспорт
	Конфигуратор.ОтключитьсяОтХранилища();
КонецПроцедуры

Процедура ПодключитьсяКХранилищу() Экспорт
	Конфигуратор.ПодключитьсяКХранилищу(_КомандыПараметры.ВернутьСвойство("PathStorage"),
		_КомандыПараметры.ВернутьСвойство("UserStorage"), , Истина);
КонецПроцедуры

Процедура ОтключитьсяОтХранилищаРасширений() Экспорт
	Попытка
		Конфигуратор.ОтключитьсяОтХранилища("ToolsWorld");
	Исключение
		Лог.Информация(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Конфигуратор.ОтключитьсяОтХранилища("Aelita");
	Исключение
		Лог.Информация(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Процедура ПодключитьсяКХранилищуРасширений() Экспорт
	
	Попытка
		Конфигуратор.ПодключитьсяКХранилищу(_КомандыПараметры.ВернутьСвойство("PathStorageAelita"),
			_КомандыПараметры.ВернутьСвойство("UserStorageAelita"), , Истина, , "Aelita");
	Исключение
		Лог.Информация(ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		Конфигуратор.ПодключитьсяКХранилищу(_КомандыПараметры.ВернутьСвойство("PathStorageToolsWorld"),
			_КомандыПараметры.ВернутьСвойство("UserStorageToolsWorld"), , Истина, , "ToolsWorld");
	Исключение
		Лог.Информация(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьХранилищеПродуктиваРасширений(КаталогКонфигурацииРасширений, ФайлНастроек) Экспорт
	
	Попытка
		ФайлНастроек = "D:\!DEVOps\Repositories\devops\Aelita.xml";
		Конфигуратор.ЗахватитьОбъектыВХранилище(_КомандыПараметры.ВернутьСвойство("PathStorageAelita"),
			_КомандыПараметры.ВернутьСвойство("UserStorageAelita"), , , , "Aelita");
		
		Конфигуратор.ОбъединитьКонфигурациюСФайлом(КаталогКонфигурацииРасширений + "/Aelita.cfe", ФайлНастроек, , , , , "Aelita");
		
		Конфигуратор.ОбновитьКонфигурациюБазыДанных( , , , "Aelita");
		
		Конфигуратор.ПоместитьИзмененияОбъектовВХранилище(_КомандыПараметры.ВернутьСвойство("PathStorageAelita"),
			_КомандыПараметры.ВернутьСвойство("UserStorageAelita"), , , _КомандыПараметры.ВернутьСвойство("NameRelease"), , , "Aelita");
	Исключение
		Лог.Информация(ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		ФайлНастроек = "D:\!DEVOps\Repositories\devops\ToolsWorld.xml";
		Конфигуратор.ЗахватитьОбъектыВХранилище(_КомандыПараметры.ВернутьСвойство("PathStorageToolsWorld"),
			_КомандыПараметры.ВернутьСвойство("UserStorageToolsWorld"), , , , "ToolsWorld");
		
		Конфигуратор.ОбъединитьКонфигурациюСФайлом(КаталогКонфигурацииРасширений + "/ToolsWorld.cfe", ФайлНастроек, , , , , "ToolsWorld");
		
		Конфигуратор.ОбновитьКонфигурациюБазыДанных( , , , "ToolsWorld");
		
		Конфигуратор.ПоместитьИзмененияОбъектовВХранилище(_КомандыПараметры.ВернутьСвойство("PathStorageToolsWorld"),
			_КомандыПараметры.ВернутьСвойство("UserStorageToolsWorld"), , , _КомандыПараметры.ВернутьСвойство("NameRelease"), , , "ToolsWorld");
	Исключение
		Лог.Информация(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьБазуИзХранилища() Экспорт
	Конфигуратор.ОбновитьКонфигурациюБазыДанныхИзХранилища(_КомандыПараметры.ВернутьСвойство("PathStorage"),
		_КомандыПараметры.ВернутьСвойство("UserStorage"));
КонецПроцедуры

Процедура РасширениеПолучитьИзХранилища() Экспорт
	Попытка
		Конфигуратор.РасширениеПолучитьИзХранилища(_КомандыПараметры.ВернутьСвойство("PathStorageAelita"),
			_КомандыПараметры.ВернутьСвойство("UserStorageAelita"), "", "Aelita");
		
		Конфигуратор.ОбновитьКонфигурациюБазыДанных( , , , "Aelita");
	Исключение
		Лог.Информация(ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		Конфигуратор.РасширениеПолучитьИзХранилища(_КомандыПараметры.ВернутьСвойство("PathStorageToolsWorld"),
			_КомандыПараметры.ВернутьСвойство("UserStorageToolsWorld"), "", "ToolsWorld");
		
		Конфигуратор.ОбновитьКонфигурациюБазыДанных( , , , "ToolsWorld");
	Исключение
		Лог.Информация(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры