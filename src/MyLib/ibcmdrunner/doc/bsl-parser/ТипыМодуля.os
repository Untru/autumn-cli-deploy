///////////////////////////////////////////////////////////////////////////////
//
// Перечисление, типы модулей
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ
///////////////////////////////////////////////////////////////////////////////

Перем ОбщийМодуль Экспорт;

Перем МодульОбъекта Экспорт;
Перем МодульМенеджера Экспорт;

Перем МодульОбычнойФормы Экспорт;
Перем МодульУправляемойФормы Экспорт;

Перем МодульКоманды Экспорт;

Перем МодульСеанса Экспорт;
Перем МодульОбычногоПриложения Экспорт;
Перем МодульУправляемогоПриложения Экспорт;
Перем МодульВнешнегоСоединения Экспорт;

Перем СоответствиеИмениФайлаИТипаМодуля;
Перем СоответствиеИмениРодителяИТипаМодуля;

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
///////////////////////////////////////////////////////////////////////////////

// Определяет тип модуля по имени файла
//
// Параметры:
//   ПолноеИмяФайла - Строка - Имя файла
//
//  Возвращаемое значение:
//   Строка - Тип модуля
//
Функция ТипМодуляПоИмениФайла(ПолноеИмяФайла) Экспорт

	Файл = Новый Файл(ПолноеИмяФайла);
    ИмяБезРасширения = Файл.ИмяБезРасширения;
	Расширение = Файл.Расширение;
	
	ТипЭтогоМодуля = Неопределено;

	Если ИмяБезРасширения = "module" И ПустаяСтрока(Расширение) Тогда
		
		ТипЭтогоМодуля = МодульОбычнойФормы;
		
	ИначеЕсли ИмяБезРасширения = "Module" Тогда
		
		МассивЧастейИмени = СтрРазделить(ПолноеИмяФайла, ПолучитьРазделительПути());
		
		Если МассивЧастейИмени.Количество() > 3 Тогда
			
			Родитель = МассивЧастейИмени[МассивЧастейИмени.Количество() - 2];
			
			Если Родитель = "Ext" Тогда
				
				Родитель = МассивЧастейИмени[МассивЧастейИмени.Количество() - 4];
				
			Иначе
				
				Родитель = МассивЧастейИмени[МассивЧастейИмени.Количество() - 3];
				
				Если Родитель = "Ext" Тогда // Общие формы
				
					Родитель = МассивЧастейИмени[МассивЧастейИмени.Количество() - 5];
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТипЭтогоМодуля = СоответствиеИмениРодителяИТипаМодуля[Родитель];

		Иначе

			ВызватьИсключение "Ошибочная структура имени файла: " + ПолноеИмяФайла;
			
		КонецЕсли; 
		

	Иначе

		ТипЭтогоМодуля = СоответствиеИмениФайлаИТипаМодуля[ИмяБезРасширения];
		
	КонецЕсли;

	Если ПустаяСтрока(ТипЭтогоМодуля) Тогда
		
		Сообщить("Не смогли определить тип модуля. " + ПолноеИмяФайла);

	КонецЕсли;	

	Возврат ТипЭтогоМодуля;

КонецФункции

// Определяет относится ли модуль к форме
//
// Параметры:
//   ТипПереданногоМодуля - Строка - Значение перечисления ТипыМодулей
//
//  Возвращаемое значение:
//   Булево - Признак принадлежности модуля к форме
//
Функция ЭтоМодульФормы(ТипПереданногоМодуля) Экспорт

	Возврат ТипПереданногоМодуля = МодульУправляемойФормы ИЛИ ТипПереданногоМодуля = МодульОбычнойФормы;
	
КонецФункции

Процедура Инициализация()

	// Инициализация значений перечисления

	ОбщийМодуль = "ОбщийМодуль";

	МодульОбъекта = "МодульОбъекта";
	МодульМенеджера = "МодульМенеджера";

	МодульОбычнойФормы = "МодульОбычнойФормы";
	МодульУправляемойФормы = "МодульУправляемойФормы";

	МодульКоманды = "МодульКоманды";

	МодульСеанса = "МодульСеанса";
	МодульОбычногоПриложения = "МодульОбычногоПриложения";
	МодульУправляемогоПриложения = "МодульУправляемогоПриложения";
	МодульВнешнегоСоединения = "МодульВнешнегоСоединения";

	// Заполнение служебных переменных
	
	СоответствиеИмениФайлаИТипаМодуля = Новый Соответствие();
	СоответствиеИмениФайлаИТипаМодуля.Вставить("CommandModule", МодульКоманды);
	СоответствиеИмениФайлаИТипаМодуля.Вставить("ManagedApplicationModule", МодульУправляемогоПриложения);
	СоответствиеИмениФайлаИТипаМодуля.Вставить("OrdinaryApplicationModule", МодульОбычногоПриложения);
	СоответствиеИмениФайлаИТипаМодуля.Вставить("SessionModule", МодульСеанса);
	СоответствиеИмениФайлаИТипаМодуля.Вставить("ExternalConnectionModule", МодульВнешнегоСоединения);
	СоответствиеИмениФайлаИТипаМодуля.Вставить("ManagerModule", МодульМенеджера);
	СоответствиеИмениФайлаИТипаМодуля.Вставить("ValueManagerModule", МодульМенеджера);
	СоответствиеИмениФайлаИТипаМодуля.Вставить("ObjectModule", МодульОбъекта);
	СоответствиеИмениФайлаИТипаМодуля.Вставить("RecordSetModule", МодульОбъекта);

	СоответствиеИмениРодителяИТипаМодуля = Новый Соответствие();
	СоответствиеИмениРодителяИТипаМодуля.Вставить("CommonModules", ОбщийМодуль);
	СоответствиеИмениРодителяИТипаМодуля.Вставить("CommonModule", ОбщийМодуль);
	СоответствиеИмениРодителяИТипаМодуля.Вставить("WebServices", МодульОбъекта);
	СоответствиеИмениРодителяИТипаМодуля.Вставить("WebService", МодульОбъекта);
	СоответствиеИмениРодителяИТипаМодуля.Вставить("HTTPServices", МодульОбъекта);
	СоответствиеИмениРодителяИТипаМодуля.Вставить("HTTPService", МодульОбъекта);
	СоответствиеИмениРодителяИТипаМодуля.Вставить("Forms", МодульУправляемойФормы);
	СоответствиеИмениРодителяИТипаМодуля.Вставить("Form", МодульУправляемойФормы);
	СоответствиеИмениРодителяИТипаМодуля.Вставить("CommonForms", МодульУправляемойФормы);
	СоответствиеИмениРодителяИТипаМодуля.Вставить("CommonForm", МодульУправляемойФормы);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////

Инициализация();
