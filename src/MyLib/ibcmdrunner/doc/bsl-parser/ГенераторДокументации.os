Перем КаталогПубликацииДокументации;
Перем АнализироватьТолькоПотомковПодсистемы;

Перем ГенераторСодержимого;
Перем СозданныеОбъекты;
Перем СоздаваемыеРазделы;

// Генератор документации - формирует данные для формирования документации
// Управляет потоком генерации
// Генераторы содержимого - шаблонизаторы, формируют тексты документации на основании подготовленных данных

#Область ПрограммныйИнтерфейс

// // Сгенерировать
// // Генерирует структуру документации и проверяет на валидность в процессе генерации
// //
// // Параметры:
// //	НастройкиГенератора - Структура - набор параметров, собранных в результате разбора конфигурации
// //		* Парсер
// //		* ОписаниеКонфигурации
// //		* Модули
// //		* ПодсистемыКонфигурации
// //		* НастройкиАнализаИзменений
// //
// // Возвращаемое значение:
// //	Структура - описание структуры сформированной документации
// //		* Ошибки - строка - обязательное поле, содержащее описание полученных ошибок
// Функция Сгенерировать(НастройкиГенератора) Экспорт

// 	// Сначала документация формируются локально, таким образом достигается целостность документации.
// 	// Если во время формирования одного из блоков документации возникла ошибка вся операция прерывается
// 	// Предварительно сформированные данные держаться в памяти

// 	Результат = ПодготовитьДанныеПубликации(НастройкиГенератора, Ложь);

// 	Возврат Результат;

// КонецФункции

// // СгенерироватьПоФайлу
// // Генерирует документацию по модулю
// //
// // Параметры:
// //	НастройкиГенератора - Структура - набор параметров, собранных в результате разбора конфигурации
// //		* ОписаниеМодуля
// //		* НастройкиАнализаИзменений
// //
// // Возвращаемое значение:
// //	Структура - описание структуры сформированной документации
// //		* Ошибки - строка - обязательное поле, содержащее описание полученных ошибок
// Функция СгенерироватьПоФайлу(НастройкиГенератора) Экспорт

// 	Результат = СтруктураРезультатГенерации();

// 	Модуль = ОписаниеМодуля;

// 	Раздел = СоздаваемыеРазделы.Добавить();
// 	Раздел.Имя = "autodoc";

// 	Если НЕ ПроверитьМодуль(Модуль, Результат.Ошибки, Ложь) Тогда

// 		Возврат Результат;
		
// 	КонецЕсли;
	
// 	ДанныеМодуля = ДанныеМодуля(Модуль, Результат.Ошибки);

// 	Если Результат.Ошибки.Количество() Тогда

// 		Возврат Результат;

// 	ИначеЕсли ДанныеМодуля <> Неопределено Тогда

// 		Содержимое = ДокументацияПоМодулю(ДанныеМодуля, Результат.Ошибки);

// 		Если НЕ ПустаяСтрока(Содержимое) Тогда

// 			СтрокаОписания = Результат.СозданныеОбъекты.Добавить();
// 			СтрокаОписания.Содержимое = Содержимое;
// 			СтрокаОписания.Имя = ЧтениеОписанийБазовый.ПолноеИмяОбъекта(Модуль, Ложь);
// 			СтрокаОписания.Родитель = Раздел;
// 			СтрокаОписания.Тип = "Модуль";

// 		КонецЕсли;

// 	КонецЕсли;

// 	Результат.Успешно = Результат.Ошибки.Количество() = 0;

// 	Возврат Результат;

// КонецФункции


// ПроверитьФайл
//	Выполняет проверку описания модуля
// Параметры:
//	НастройкиГенератора - Структура - набор параметров, собранных в результате разбора конфигурации
//		* ОписаниеМодуля
//		* НастройкиАнализаИзменений
//
//  Возвращаемое значение:
//		Строка - описание полученных ошибок
//
Функция ПроверитьФайл(ОписаниеМодуля) Экспорт

	Результат = СтруктураРезультатГенерации();
	
	Модуль = ОписаниеМодуля;
	
	ПроверитьМодуль(Модуль, Результат.Ошибки, Ложь);
	
	//ДанныеМодуля(Модуль, Результат.Ошибки);

	Возврат СтрСоединить(Результат.Ошибки, Символы.ПС);
	
КонецФункции

#КонецОбласти

#Область ГенерацияДанных

Функция ДанныеМодуля(Модуль, Ошибки)

	Данные = Новый Структура("Методы, Имя", Новый Массив, Модуль.Родитель.Наименование);

	Для Каждого Блок Из Модуль.НаборБлоков Цикл

		Если Блок.ТипБлока <> ТипыБлоковМодуля.ЗаголовокПроцедуры
			И Блок.ТипБлока <> ТипыБлоковМодуля.ЗаголовокФункции Тогда

			Продолжить;

		КонецЕсли;

		ОписаниеМетода = ОписаниеМетода(Блок);

		ОшибкиМетода = ПроверитьМетод(ОписаниеМетода);

		Если ПустаяСтрока(ОшибкиМетода) Тогда

			Данные.Методы.Добавить(ОписаниеМетода);

		Иначе

			Ошибки.Добавить(Модуль.ПутьКФайлу + ": " + ОшибкиМетода);

		КонецЕсли;

	КонецЦикла;

	Возврат Данные;

КонецФункции

// Функция ДанныеКонстант(НастройкиГенератора, Ошибки)

// 	Константы = Новый Массив;

// 	Для Каждого Константа Из НастройкиГенератора.Парсер.ОписаниеКонфигурации().НайтиОбъектыПоТипу("Константы") Цикл

// 		ЧтениеКонфигурации.ПрочитатьОписание(Константа);

// 		ОписаниеКонстанты = Новый Структура("Имя, Тип, Описание, Подсистема");

// 		ОписаниеКонстанты.Имя = Константа.Описание.Наименование;
// 		ОписаниеКонстанты.Тип = Константа.Описание.Тип;
// 		ОписаниеКонстанты.Описание = Константа.Описание.Пояснение;

// 		Подсистема = ПолучитьСтруктуруПодсистем(Константа.Подсистемы);

// 		ОписаниеКонстанты.Подсистема = Подсистема;

// 		Константы.Добавить(ОписаниеКонстанты);

// 		Если ПустаяСтрока(ОписаниеКонстанты.Описание) Тогда

// 			Ошибки.Добавить(ОписаниеКонстанты.Имя + ": Описание константы не заполнено.");

// 		КонецЕсли;

// 		Если ПустаяСтрока(ОписаниеКонстанты.Подсистема) Тогда

// 			Ошибки.Добавить(ОписаниеКонстанты.Имя + ": Константа не включена ни в одну подсистему.");

// 		КонецЕсли;

// 	КонецЦикла;

// 	Возврат Константы;

// КонецФункции

#КонецОбласти //ГенерацияДанных



#Область Служебные

Процедура СкорректироватьИменаСтраниц(РезультатГенерации)

	Для каждого Строка Из РезультатГенерации.СозданныеОбъекты Цикл
		
		Строка.Имя = ГенераторСодержимого.ПрефиксИмени(Строка.Тип) + Строка.Имя;
		
	КонецЦикла;

	Для каждого Строка Из РезультатГенерации.СоздаваемыеРазделы Цикл
		
		Строка.Имя = ГенераторСодержимого.ПрефиксИмени(Строка.Тип) + Строка.Имя;
		
	КонецЦикла;

КонецПроцедуры

Функция ЭтоПрограммноСформированнаяСтраница(ИмяСтарицы, ТипыСтраниц)
	
	Для Каждого Тип Из ТипыСтраниц Цикл
		
		ПрефиксИмени = ГенераторСодержимого.ПрефиксИмени(Тип);
		
		Если НЕ ПустаяСтрока(ПрефиксИмени) И СтрНачинаетсяС(ИмяСтарицы, ПрефиксИмени) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ОбработатьМодуль(Модуль, НастройкиГенератора, Результат)

	Если НЕ ПроверитьМодуль(Модуль, Результат.Ошибки) Тогда

		Возврат Ложь;

	КонецЕсли;

	ДанныеМодуля = ДанныеМодуля(Модуль, Результат.Ошибки);

	Если Результат.Ошибки.Количество() Тогда

		Возврат Ложь;

	ИначеЕсли ДанныеМодуля <> Неопределено Тогда

		ТекстОшибки = Неопределено;
		
	КонецЕсли;

	Возврат Истина;

КонецФункции

Функция СтруктураРезультатГенерации()

	СозданныеОбъекты = Новый ТаблицаЗначений;
	СозданныеОбъекты.Колонки.Добавить("Имя"); 			// Имя страницы/раздела
	СозданныеОбъекты.Колонки.Добавить("Тип"); 			// Тип источника документации
	СозданныеОбъекты.Колонки.Добавить("Родитель"); 		// Родитель страницы, ссылку на строку этой же таблицы
	СозданныеОбъекты.Колонки.Добавить("Содержимое"); 	// Содержимое страницы
	СозданныеОбъекты.Колонки.Добавить("Идентификатор"); // Служебное поле, можно использовать при публикации

	СоздаваемыеРазделы = СозданныеОбъекты.Скопировать();

	Ошибки = Новый Массив();

	Результат = Новый Структура;
	Результат.Вставить("СозданныеОбъекты", СозданныеОбъекты);
	Результат.Вставить("СоздаваемыеРазделы", СоздаваемыеРазделы);
	Результат.Вставить("Ошибки", Новый Массив());
	Результат.Вставить("Успешно", Ложь);

	Возврат Результат;

КонецФункции

Функция ПроверитьМодуль(Модуль, Ошибки, ЭтоМодульКонфигурации = Истина) Экспорт
	
	ТекстОшибки = ПроверитьРазделыМодуля(Модуль);

	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда

		Ошибки.Добавить(Модуль.ПутьКФайлу + ": " + ТекстОшибки);
		Возврат Ложь;

	КонецЕсли;

	Возврат Истина;

КонецФункции

Функция ПроверитьРазделыМодуля(Модуль)

	Разделы = ОбязательныеРазделыМодуля(Модуль);

	Ошибки = Новый Массив();

	Если Модуль.НаборБлоков.Количество()
		И Модуль.ОписаниеМодуля.Разделы.Количество() <> Разделы.Количество() Тогда

		// TODO: Проверить, когда указаны не корректные имена разделов, но количество совпадает
		Для Каждого ТекРаздел Из Разделы Цикл

			Если Модуль.ОписаниеМодуля.Разделы.Найти(ТекРаздел) = Неопределено Тогда

				Ошибки.Добавить(" - отсутствует раздел " + ТекРаздел);

			КонецЕсли;

		КонецЦикла;

		Если Ошибки.Количество() Тогда

			ТекстОшибок = "В структуре модуля неполный состав разделов: " + СтрСоединить(Ошибки);

		Иначе

			ТекстОшибок = "В структуре модуля присутсвуют дубли разделов";

		КонецЕсли;

	КонецЕсли;

	Возврат "";

КонецФункции

Функция ПроверитьМетод(ОписаниеМетода)

	Если ПустаяСтрока(ОписаниеМетода.ИмяРаздела) Тогда

		Возврат СтрШаблон("Метод '%1' находится вне раздела", ОписаниеМетода.ИмяМетода);

	КонецЕсли;

	ОжидаемЭкспортныйМетод = ОписаниеМетода.ИмяРаздела = ТипыОбласти.РазделПрограммныйИнтерфейс
							 ИЛИ ОписаниеМетода.ИмяРаздела = ТипыОбласти.РазделСлужебныйПрограммныйИнтерфейс;

	Если НЕ ОписаниеМетода.Экспортный И ОжидаемЭкспортныйМетод Тогда

		Возврат СтрШаблон("В разделе %1 находится неэкспортный метод '%2'", ОписаниеМетода.ИмяРаздела, ОписаниеМетода.ИмяМетода);

	КонецЕсли;

	Если ОписаниеМетода.Экспортный И НЕ ОжидаемЭкспортныйМетод Тогда

		Возврат СтрШаблон("В разделе %1 находится экспортный метод '%2'", ОписаниеМетода.ИмяРаздела, ОписаниеМетода.ИмяМетода);

	КонецЕсли;

	Если ОписаниеМетода.ИмяРаздела = ТипыОбласти.РазделПрограммныйИнтерфейс Тогда

		Возврат ПроверитьОписаниеМетодаAPI(ОписаниеМетода);

	Иначе

		Возврат Неопределено;

	КонецЕсли;

КонецФункции

Функция ПроверитьОписаниеМетодаAPI(ОписаниеМетода)

	Ошибки = Новый Массив();

	Если НЕ ЗначениеЗаполнено(ОписаниеМетода.Описание) Тогда

		Ошибки.Добавить(СтрШаблон("У метода '%1' не заполнено описание", ОписаниеМетода.ИмяМетода));

	КонецЕсли;

	Если ОписаниеМетода.ПараметрыМетода.Количество() Тогда

		Ит = 0;

		Для Каждого Параметр Из ОписаниеМетода.ПараметрыМетода Цикл

			Ит = Ит + 1;

			Если НЕ ЗначениеЗаполнено(Параметр.ОписаниеПараметра) Тогда

				Ошибки.Добавить(СтрШаблон("У метода '%1' не заполнено описание параметра №%2 (%3)", ОписаниеМетода.ИмяМетода, Ит, Параметр.Имя));

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если ОписаниеМетода.ТипБлока = ТипыБлоковМодуля.ЗаголовокФункции Тогда

		Если НЕ ЗначениеЗаполнено(ОписаниеМетода.ОписаниеВозвращаемогоЗначения) Тогда

			Ошибки.Добавить(СтрШаблон("У метода '%1' не заполнено описание возвращаемого значения", ОписаниеМетода.ИмяМетода));

		КонецЕсли;

	КонецЕсли;

	Возврат СтрСоединить(Ошибки, Символы.ПС);

КонецФункции

Функция ОписаниеМетода(Блок)

	Описание = Новый Структура;
	Описание.Вставить("ТипБлока", Блок.ТипБлока);
	Описание.Вставить("ИмяРаздела", Блок.ОписаниеБлока.ИмяРаздела);
	Описание.Вставить("ИмяОбласти", Блок.ОписаниеБлока.ИмяОбласти);
	Описание.Вставить("Экспортный", Блок.ОписаниеБлока.Экспортный);
	Описание.Вставить("ИмяМетода", Блок.ОписаниеБлока.ИмяМетода);
	Описание.Вставить("Описание", Блок.ОписаниеБлока.Назначение);
	Описание.Вставить("ПараметрыМетода", Блок.ОписаниеБлока.ПараметрыМетода);
	Описание.Вставить("ОписаниеВозвращаемогоЗначения", Блок.ОписаниеБлока.ОписаниеВозвращаемогоЗначения);
	Описание.Вставить("ТипВозвращаемогоЗначения", Блок.ОписаниеБлока.ТипВозвращаемогоЗначения);
	Описание.Вставить("Примеры", Блок.ОписаниеБлока.Примеры);

	Возврат Описание;

КонецФункции

Функция ОбязательныеРазделыМодуля(Модуль)

	НужныеРазделы = Новый Массив();

	Если Модуль.ТипМодуля = ТипыМодуля.ОбщийМодуль Тогда

		НужныеРазделы = ТипыОбласти.РазделыОбщегоМодуля;

	ИначеЕсли Модуль.ТипМодуля = ТипыМодуля.МодульМенеджера Тогда

		НужныеРазделы = ТипыОбласти.РазделыМодуляМенеджера;

	КонецЕсли;

	Возврат НужныеРазделы;

КонецФункции

Функция ОбрабатываемФайл(НастройкиГенератора, ИмяФайла, Модуль)

	Если Модуль.ТипМодуля <> ТипыМодуля.ОбщийМодуль
		И Модуль.ТипМодуля <> ТипыМодуля.МодульМенеджера Тогда

		// Реализован анализ только для общих модулей и модулей менеджеров
		// остальные пропускаем
		Возврат Ложь;

	КонецЕсли;

	Если Модуль.Родитель <> Неопределено И Модуль.Родитель.Тип = "Constant" Тогда

		// Для констант не поддерживается
		Возврат Ложь;

	КонецЕсли;

	Возврат НЕ НастройкиГенератора.НастройкиАнализаИзменений.Анализировать
		ИЛИ НастройкиГенератора.НастройкиАнализаИзменений.ИзмененныеФайлы.Найти(НРег(ИмяФайла)) <> Неопределено;

КонецФункции



#КонецОбласти

// Процедура ПриСозданииОбъекта(Шаблонизатор)

// 	ГенераторСодержимого = Шаблонизатор;

// 	Попытка
		
// 		АнализироватьТолькоПотомковПодсистемы = ГенераторСодержимого.АнализироватьТолькоПотомковПодсистемы;
		
// 	Исключение
		
// 		// Реакция на ошибку не нужна
		
// 	КонецПопытки;

// КонецПроцедуры