#Использовать gitrunner
#Использовать 1connector
&Пластилин Перем МенеджерОпций; 

Перем Гит Экспорт;
Перем ТекущаяВетка Экспорт;


&Логер
Перем Лог;

&Желудь
Процедура ПриСозданииОбъекта()
	
	Гит = Новый ГитРепозиторий();
	
КонецПроцедуры


Процедура СоздатьВеткуИзМейн() Экспорт
	
	ПараметрыКомандыGit = Новый Массив;
	ПараметрыКомандыGit.Добавить("push origin " + Гит.ПолучитьТекущуюВетку());
	Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
	
	ПредыдущаяВетка = Гит.ПолучитьТекущуюВетку();
	
	ВеткаОтсутствуетВЛокальномРепозитории = НЕ ВеткаСуществует(ТекущаяВетка);
	ВеткаПрисутствуетВУдаленномРепозитории = ВеткаСуществует(ТекущаяВетка, Истина);
	
	Если ВеткаОтсутствуетВЛокальномРепозитории Тогда
		
		
		Если ВеткаПрисутствуетВУдаленномРепозитории Тогда
			
			ПараметрыКомандыGit = Новый Массив;
			ПараметрыКомандыGit.Добавить(СтрШаблон("fetch origin %1:%1", ТекущаяВетка));
			Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
			
			ПараметрыКомандыGit = Новый Массив;
			ПараметрыКомандыGit.Добавить(СтрШаблон("branch --set-upstream-to=remotes/origin/%1 %1", ТекущаяВетка));
			Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
		Иначе
			
			//Переходим на дев
			Гит.ПерейтиВВетку("main");
			Гит.Получить();
			
			//Создаем новую ветку
			Гит.СоздатьВетку(ТекущаяВетка);
			
			ПараметрыКомандыGit = Новый Массив;
			ПараметрыКомандыGit.Добавить(СтрШаблон("push -u origin %1", ТекущаяВетка));
			Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
		КонецЕсли;
		
	КонецЕсли;
	
	Гит.ПерейтиВВетку(ПредыдущаяВетка);
	
КонецПроцедуры

Процедура СоздатьВеткуИзДевелоп() Экспорт

	
	ПараметрыКомандыGit = Новый Массив;
	ПараметрыКомандыGit.Добавить("push origin " + Гит.ПолучитьТекущуюВетку());
	Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
	
	ПредыдущаяВетка = Гит.ПолучитьТекущуюВетку();
	
	ВеткаОтсутствуетВЛокальномРепозитории = НЕ ВеткаСуществует(ТекущаяВетка);
	ВеткаПрисутствуетВУдаленномРепозитории = ВеткаСуществует(ТекущаяВетка, Истина);
	
	Если ВеткаОтсутствуетВЛокальномРепозитории Тогда
		
		
		Если ВеткаПрисутствуетВУдаленномРепозитории Тогда
			
			ПараметрыКомандыGit = Новый Массив;
			ПараметрыКомандыGit.Добавить(СтрШаблон("fetch origin %1:%1", ТекущаяВетка));
			Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
			
			ПараметрыКомандыGit = Новый Массив;
			ПараметрыКомандыGit.Добавить(СтрШаблон("branch --set-upstream-to=remotes/origin/%1 %1", ТекущаяВетка));
			Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
		Иначе
			
			//Переходим на дев
			Гит.ПерейтиВВетку("develop");
			Гит.Получить();
			
			//Создаем новую ветку
			Гит.СоздатьВетку(ТекущаяВетка);
			
			ПараметрыКомандыGit = Новый Массив;
			ПараметрыКомандыGit.Добавить(СтрШаблон("push -u origin %1", ТекущаяВетка));
			Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
		КонецЕсли;
		
	КонецЕсли;
	
	Гит.ПерейтиВВетку(ПредыдущаяВетка);
	
КонецПроцедуры

Процедура ПерейтиНаВеткуИзДевелоп() Экспорт
	
	ПараметрыКомандыGit = Новый Массив;
	ПараметрыКомандыGit.Добавить("push origin " + Гит.ПолучитьТекущуюВетку());
	Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
	
	ВеткаОтсутствуетВЛокальномРепозитории = НЕ ВеткаСуществует(ТекущаяВетка);
	ВеткаПрисутствуетВУдаленномРепозитории = ВеткаСуществует(ТекущаяВетка, Истина);
	
	Если ВеткаОтсутствуетВЛокальномРепозитории Тогда	
		
		Если ВеткаПрисутствуетВУдаленномРепозитории Тогда
			
			Логгер.Информация("Попал в апстрим");
			ПараметрыКомандыGit = Новый Массив;
			ПараметрыКомандыGit.Добавить(СтрШаблон("fetch origin %1:%1", ТекущаяВетка));
			Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
			
			ПараметрыКомандыGit = Новый Массив;
			ПараметрыКомандыGit.Добавить(СтрШаблон("branch --set-upstream-to=remotes/origin/%1 %1", ТекущаяВетка));
			Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
		Иначе
			
			//Переходим на дев
			Гит.ПерейтиВВетку("develop");
			Гит.Получить();
			
			//Создаем новую ветку
			Гит.СоздатьВетку(ТекущаяВетка);
			
			Логгер.Информация("Не попал в апстрим");
			ПараметрыКомандыGit = Новый Массив;
			ПараметрыКомандыGit.Добавить(СтрШаблон("push -u origin %1", ТекущаяВетка));
			Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
		КонецЕсли;
		
	КонецЕсли;
	
	Гит.ПерейтиВВетку(ТекущаяВетка);
	
	ПараметрыКомандыGit = Новый Массив;
	ПараметрыКомандыGit.Добавить("pull");
	Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
	
	
КонецПроцедуры

Процедура ПерейтиНаВеткуДевелоп() Экспорт
	
	//Переходим на дев
	Гит.ПерейтиВВетку("develop");
	Гит.Получить();

КонецПроцедуры

Функция ПолучитьТекущуюВетку() Экспорт
	Возврат Гит.ПолучитьТекущуюВетку();
КонецФункции

Процедура ПерейтиНаВетку(ИмяВетки) Экспорт
	
	Гит.ПерейтиВВетку(ИмяВетки);
	Гит.Получить();
	
КонецПроцедуры

Процедура ПерейтиНаВеткуМейн() Экспорт
	
	//Переходим на мейн
	Гит.ПерейтиВВетку("main");
	Гит.Получить();
	
КонецПроцедуры

Функция СоответствиеСписокВсехВеток() Экспорт
	
	ТЗВсехВеток = Гит.ПолучитьСписокВеток(Истина);
	
	СоответствиеВеток = Новый Соответствие();
	
	Для Каждого ЭлементТЗ Из ТЗВсехВеток Цикл
		СоответствиеВеток.Вставить(ЭлементТЗ.Имя, ЭлементТЗ.Имя);
	КонецЦикла;
	
	Возврат СоответствиеВеток;
	
КонецФункции

Функция СписокВсехВеток() Экспорт
	
	ТЗВсехВеток = Гит.ПолучитьСписокВеток(Истина);
	
	Возврат ТЗВсехВеток;
	
КонецФункции

Функция ВеткаСуществует(ИмяПроверяемойВетки, ПроверятьВУдаленномРепозитории = Ложь)
	
	ТЗВсехВеток = Гит.ПолучитьСписокВеток(ПроверятьВУдаленномРепозитории);
	Для Каждого СтрокаВетка Из ТЗВсехВеток Цикл
		Если СтрНайти(СтрокаВетка.Имя, ИмяПроверяемойВетки) > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура Инициализировать(СоздатьРепозиторий = Ложь) Экспорт
	
	Гит.УстановитьРабочийКаталог(МенеджерОпций.ВернутьСвойство("PathRepository"));
	
	Если СоздатьРепозиторий Тогда
		КлонироватьРепозиторий();
	КонецЕсли;
	
	ПараметрыКомандыGit = Новый Массив;
	ПараметрыКомандыGit.Добавить("pull");
	Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
	
	НастройкаОтправить = Новый НастройкаКомандыОтправить;
	НастройкаОтправить.УстановитьURLРепозиторияОтправки("origin");
	НастройкаОтправить.ОтображатьПрогресс();
	НастройкаОтправить.ПерезаписатьИсторию();
	НастройкаОтправить.ПолнаяОтправка();
	
	Гит.УстановитьНастройкуКомандыОтправить(НастройкаОтправить);
	ТекущаяВетка = Гит.ПолучитьТекущуюВетку();
	
КонецПроцедуры

Процедура Закоммитить() Экспорт
	
	ТекстКоммита = МенеджерОпций.ВернутьСвойство("TextCommit");
	АвторКоммита = МенеджерОпций.ВернутьСвойство("CommitAuthor");
	Если НЕ ЗначениеЗаполнено(ТекстКоммита) Тогда
		Возврат;
	КонецЕсли;
	
	Гит.ДобавитьФайлВИндекс(".");
	Гит.Закоммитить(ТекстКоммита, , , АвторКоммита, , АвторКоммита);
	
	ПараметрыКомандыGit = Новый Массив;
	ПараметрыКомандыGit.Добавить("push origin " + Гит.ПолучитьТекущуюВетку());
	Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
	
КонецПроцедуры

Процедура СоздатьМерджРеквест() Экспорт
	
	ТекстМерджРеквеста = МенеджерОпций.ВернутьСвойство("TextMR");
	Если НЕ ЗначениеЗаполнено(ТекстМерджРеквеста) Тогда
		Возврат;
	КонецЕсли;
	URLGitLab = МенеджерОпций.ВернутьСвойство("UrlRemoteRepository");
	ТокенПодключения = МенеджерОпций.ВернутьСвойство("TokenConnectionGitLab");
	
	ЗаголовкиЗапросаМерджРеквест = Новый Соответствие;
	ЗаголовкиЗапросаМерджРеквест.Вставить("content-type", "application/json");
	
	МассивРевьюверов = Новый Массив;
	МассивРевьюверов.Добавить(МенеджерОпций.ВернутьСвойство("IdUserGitlab"));
	
	ДанныеМерджРеквеста = Новый Структура;
	ДанныеМерджРеквеста.Вставить("id", МенеджерОпций.ВернутьСвойство("IdProject"));
	ДанныеМерджРеквеста.Вставить("source_branch", СтрЗаменить(Строка(ТекущаяВетка), Символы.ПС, ""));
	ДанныеМерджРеквеста.Вставить("target_branch", "develop");
	ДанныеМерджРеквеста.Вставить("title", ТекстМерджРеквеста);
	ДанныеМерджРеквеста.Вставить("description", ТекстМерджРеквеста);
	ДанныеМерджРеквеста.Вставить("reviewer_ids", МассивРевьюверов);
	
	URLЗапроса = СтрШаблон("%1/api/v4/projects/%2/merge_requests?private_token=%3", URLGitLab,
			МенеджерОпций.ВернутьСвойство("IdProject"), ТокенПодключения);
	
	ОтветЗапроса = КоннекторHTTP.Post(URLЗапроса, , ДанныеМерджРеквеста);
	
	Попытка
		ТекстСообщенияМерджРеквест = СтрШаблон("Создан мердж реквест: %1", Строка(ОтветЗапроса.Json()["web_url"]));
		Логгер.Информация(ТекстСообщенияМерджРеквест);
		Логгер.Информация(СтрШаблон("Создание к Develop: %1", ОтветЗапроса.Текст()));
	Исключение
		Логгер.Информация("Мерджреквест не создан. Исключительная ошибка!");
	КонецПопытки;
	
	Если СтрНайти(Строка(ТекущаяВетка), "hotfix") Тогда
		ДанныеМерджРеквеста.Вставить("target_branch", "main");
		
		ОтветЗапроса = КоннекторHTTP.Post(URLЗапроса, , ДанныеМерджРеквеста);
		
		Попытка
			ТекстСообщенияМерджРеквест = СтрШаблон("Создан мердж реквест: %1", Строка(ОтветЗапроса.Json()["web_url"]));
			Логгер.Информация(ТекстСообщенияМерджРеквест);
			Логгер.Информация(СтрШаблон("Создание к Main: %1", ОтветЗапроса.Текст()));
		Исключение
			Логгер.Информация("Мерджреквест не создан. Исключительная ошибка!");
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура КлонироватьРепозиторий()
	
	Гит.КлонироватьРепозиторий(МенеджерОпций.ВернутьСвойство("PathRemoteRepository"),
		МенеджерОпций.ВернутьСвойство("PathRepository"));
	
	ПараметрыКомандыGit = Новый Массив;
	ПараметрыКомандыGit.Добавить("config --global --add safe.directory " + 
		СтрЗаменить(СтрЗаменить(МенеджерОпций.ВернутьСвойство("PathRepository"), """", ""), "\", "/")
	);
	Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
	
	ПараметрыКомандыGit = Новый Массив;
	ПараметрыКомандыGit.Добавить("config user.name " + МенеджерОпций.ВернутьСвойство("UserName"));
	Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
	
	ПараметрыКомандыGit = Новый Массив;
	ПараметрыКомандыGit.Добавить("config user.email " + МенеджерОпций.ВернутьСвойство("UserEmail"));
	Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
		
КонецПроцедуры