#Использовать "../src/MyLib/gitrunner"
#Использовать "../oscript_modules/1connector"

Перем Гит Экспорт;
Перем ТекущаяВетка Экспорт;
Перем ИдентификаторЛога Экспорт;
Перем _КомандыПараметры Экспорт;

&Характер("Компанейский")
&Желудь
Процедура ПриСозданииОбъекта()
	
	Гит = Новый ГитРепозиторий();
	
КонецПроцедуры


Процедура СоздатьВеткуИзДевелоп() Экспорт
	
	ПредыдущаяВетка = Гит.ПолучитьТекущуюВетку();

	ВеткаОтсутствуетВЛокальномРепозитории = Не ВеткаСуществует(ТекущаяВетка);
	ВеткаПрисутствуетВУдаленномРепозитории = ВеткаСуществует(ТекущаяВетка, Истина);

	Если ВеткаОтсутствуетВЛокальномРепозитории Тогда


		Если ВеткаПрисутствуетВУдаленномРепозитории Тогда

			ПараметрыКомандыGit = Новый Массив;
			ПараметрыКомандыGit.Добавить(СтрШаблон("fetch origin %1:%1", ТекущаяВетка));
			Гит.ВыполнитьКоманду(ПараметрыКомандыGit);

			ПараметрыКомандыGit = Новый Массив;
			ПараметрыКомандыGit.Добавить(СтрШаблон("branch --set-upstream-to=remotes/origin/%1 %1", ТекущаяВетка));
			Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
		Иначе

			//Переходим на дев
			Гит.ПерейтиВВетку("develop");
			Гит.Получить();
		
			//Создаем новую ветку
			Гит.СоздатьВетку(ТекущаяВетка);

			ПараметрыКомандыGit = Новый Массив;
			ПараметрыКомандыGit.Добавить(СтрШаблон("push -u origin %1", ТекущаяВетка));
			Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
		КонецЕсли;		

	КонецЕсли;

	Гит.ПерейтиВВетку(ПредыдущаяВетка);

КонецПроцедуры

Процедура ПерейтиНаВеткуИзДевелоп() Экспорт
	
	//Принимаем изменения и отправляем
	Гит.ДобавитьФайлВИндекс(".");
	ТекстКоммита = "Автокоммит";
	Если ЗначениеЗаполнено(_КомандыПараметры.ВернутьСвойство("TextCommit")) Тогда
		ТекстКоммита = _КомандыПараметры.ВернутьСвойство("TextCommit");
	КонецЕсли;

	//Гит.Закоммитить(ТекстКоммита);
	
	// ПараметрыКомандыGit = Новый Массив;
	// ПараметрыКомандыGit.Добавить("push origin " + Гит.ПолучитьТекущуюВетку());
	// Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
	
	ВеткаОтсутствуетВЛокальномРепозитории = Не ВеткаСуществует(ТекущаяВетка);
	ВеткаПрисутствуетВУдаленномРепозитории = ВеткаСуществует(ТекущаяВетка, Истина);

	Если ВеткаОтсутствуетВЛокальномРепозитории Тогда


		Если ВеткаПрисутствуетВУдаленномРепозитории Тогда

			Сообщить("Попал в апстрим");
			ПараметрыКомандыGit = Новый Массив;
			ПараметрыКомандыGit.Добавить(СтрШаблон("fetch origin %1:%1", ТекущаяВетка));
			Гит.ВыполнитьКоманду(ПараметрыКомандыGit);

			ПараметрыКомандыGit = Новый Массив;
			ПараметрыКомандыGit.Добавить(СтрШаблон("branch --set-upstream-to=remotes/origin/%1 %1", ТекущаяВетка));
			Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
		Иначе

			//Переходим на дев
			Гит.ПерейтиВВетку("develop");
			Гит.Получить();
		
			//Создаем новую ветку
			Гит.СоздатьВетку(ТекущаяВетка);

			Сообщить("Не попал в апстрим");
			ПараметрыКомандыGit = Новый Массив;
			ПараметрыКомандыGit.Добавить(СтрШаблон("push -u origin %1", ТекущаяВетка));
			Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
		КонецЕсли;		

	КонецЕсли;

	Гит.ПерейтиВВетку(ТекущаяВетка);
	
	ПараметрыКомандыGit = Новый Массив;
	ПараметрыКомандыGit.Добавить("pull");
	Гит.ВыполнитьКоманду(ПараметрыКомандыGit);


КонецПроцедуры

Функция СоответствиеСписокВсехВеток() Экспорт
	
	ТЗВсехВеток = Гит.ПолучитьСписокВеток(Истина);
	
	СоответствиеВеток = Новый Соответствие();
	
	Для Каждого ЭлементТЗ Из ТЗВсехВеток Цикл
		СоответствиеВеток.Вставить(ЭлементТЗ.Имя, ЭлементТЗ.Имя);
	КонецЦикла;
	
	Возврат СоответствиеВеток;
	
КонецФункции

Функция СписокВсехВеток() Экспорт
	
	ТЗВсехВеток = Гит.ПолучитьСписокВеток(Истина);
	
	Возврат ТЗВсехВеток;
	
КонецФункции

Функция ВеткаСуществует(ИмяПроверяемойВетки, ПроверятьВУдаленномРепозитории = Ложь)
	
	ТЗВсехВеток = Гит.ПолучитьСписокВеток(ПроверятьВУдаленномРепозитории);
	Для Каждого СтрокаВетка Из ТЗВсехВеток Цикл
		Если СтрНайти(СтрокаВетка.Имя, ИмяПроверяемойВетки) > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
	
КонецФункции

Процедура Инициализировать(Идентификатор, СоздатьРепозиторий = Ложь) Экспорт
	
	Гит.УстановитьРабочийКаталог(_КомандыПараметры.ВернутьСвойство("PathRepository"));

	Если СоздатьРепозиторий Тогда
		КлонироватьРепозиторий();
	КонецЕсли;	

	Гит.ИдентификаторЛога = Идентификатор;
	
	ПараметрыКомандыGit = Новый Массив;
	ПараметрыКомандыGit.Добавить("pull");
	Гит.ВыполнитьКоманду(ПараметрыКомандыGit);
	
	НастройкаОтправить = Новый НастройкаКомандыОтправить;
	НастройкаОтправить.УстановитьURLРепозиторияОтправки("origin");
	НастройкаОтправить.ОтображатьПрогресс();
	НастройкаОтправить.ПерезаписатьИсторию();
	НастройкаОтправить.ПолнаяОтправка();
	
	Гит.УстановитьНастройкуКомандыОтправить(НастройкаОтправить);
	ТекущаяВетка = Гит.ПолучитьТекущуюВетку();

КонецПроцедуры

Процедура СоздатьМерджРеквест() Экспорт

	ТекстКоммита = _КомандыПараметры.ВернутьСвойство("TextCommit");
	Если Не ЗначениеЗаполнено(ТекстКоммита) Тогда
		Возврат;
	КонецЕсли; 
	URLGitLab = _КомандыПараметры.ВернутьСвойство("UrlGitLab");
	ТокенПодключения = _КомандыПараметры.ВернутьСвойство("TokenConnectionGitLab");

	ЗаголовкиЗапросаМерджРеквест = Новый Соответствие;
	ЗаголовкиЗапросаМерджРеквест.Вставить("content-type", "application/json");

	ДанныеМерджРеквеста = Новый Структура;
	ДанныеМерджРеквеста.Вставить("id", _КомандыПараметры.ВернутьСвойство("IdProject"));
	ДанныеМерджРеквеста.Вставить("source_branch", СтрЗаменить(Строка(ТекущаяВетка), Символы.ПС, ""));
	ДанныеМерджРеквеста.Вставить("target_branch", "develop");
	ДанныеМерджРеквеста.Вставить("title", ТекстКоммита);
	ДанныеМерджРеквеста.Вставить("description", ТекстКоммита);
	
	Гит.ДобавитьФайлВИндекс(".");
	Гит.Закоммитить(ТекстКоммита);
	
	ПараметрыКомандыGit = Новый Массив;
	ПараметрыКомандыGit.Добавить("push origin " + Гит.ПолучитьТекущуюВетку());
	Гит.ВыполнитьКоманду(ПараметрыКомандыGit);

	URLЗапроса = СтрШаблон("%1/api/v4/projects/%2/merge_requests?private_token=%3", URLGitLab,
		_КомандыПараметры.ВернутьСвойство("IdProject"), ТокенПодключения);

	ОтветЗапроса = КоннекторHTTP.Post(URLЗапроса,, ДанныеМерджРеквеста);

	Попытка
		ТекстСообщенияМерджРеквест = СтрШаблон("Создан мердж реквест: %1", Строка(ОтветЗапроса.Json()["web_url"]));
		Сообщить(ТекстСообщенияМерджРеквест);
	Исключение
		Сообщить("Мерджреквест не создан. Исключительная ошибка!");
	КонецПопытки;
	
КонецПроцедуры

Процедура КлонироватьРепозиторий()

	Гит.КлонироватьРепозиторий(_КомандыПараметры.ВернутьСвойство("PathRemoteRepository"),
		_КомандыПараметры.ВернутьСвойство("PathRepository"));
	
	ПараметрыКомандыGit = Новый Массив;
	ПараметрыКомандыGit.Добавить("config user.name " + _КомандыПараметры.ВернутьСвойство("UserName"));
	Гит.ВыполнитьКоманду(ПараметрыКомандыGit);

	ПараметрыКомандыGit = Новый Массив;
	ПараметрыКомандыGit.Добавить("config user.email " + _КомандыПараметры.ВернутьСвойство("UserEmail"));
	Гит.ВыполнитьКоманду(ПараметрыКомандыGit);

	ПараметрыКомандыGit = Новый Массив;
	ПараметрыКомандыGit.Добавить("config --global --add safe.directory " + СтрЗаменить(СтрЗаменить(_КомандыПараметры.ВернутьСвойство("PathRepository"), """", ""), "\", "/"));
	Гит.ВыполнитьКоманду(ПараметрыКомандыGit);

КонецПроцедуры